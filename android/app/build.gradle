plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Load keystore properties for signing (if available)
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.example.flutter_todo_app"
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.flutter_todo_app"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        
        // Enable multidex for large apps
        multiDexEnabled true
        
        // Proguard settings
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }

    // Signing configurations
    signingConfigs {
        debug {
            // Debug signing config (default)
        }
        
        release {
            if (keystoreProperties['keyAlias']) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file('mykey.jks') : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            
            // Debug-specific configurations
            buildConfigField "boolean", "DEBUG_MODE", "true"
            resValue "string", "app_name", "Todo App (Debug)"
        }
        
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            signingConfig keystoreProperties['keyAlias'] ? signingConfigs.release : signingConfigs.debug
            
            // Release-specific configurations
            buildConfigField "boolean", "DEBUG_MODE", "false"
            resValue "string", "app_name", "Todo App"
        }
        
        profile {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
            
            buildConfigField "boolean", "DEBUG_MODE", "false"
            resValue "string", "app_name", "Todo App (Profile)"
        }
    }

    // Build optimization
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
    }

    // Lint options
    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    // Bundle configuration for AAB
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    
    // AndroidX dependencies
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'
    
    // Multidex support
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Local notifications support
    implementation 'androidx.work:work-runtime:2.8.1'
    implementation 'androidx.concurrent:concurrent-futures:1.1.0'
}

configurations.all {
    resolutionStrategy {
        force 'androidx.work:work-runtime:2.8.1'
        force 'androidx.work:work-runtime-ktx:2.8.1'
    }
}

